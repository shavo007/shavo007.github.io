<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[Tech Blog]]></title><description><![CDATA[Thoughts, stories and ideas.]]></description><link>http://shavo007.github.io/</link><generator>Ghost 0.8</generator><lastBuildDate>Sun, 13 Nov 2016 10:51:36 GMT</lastBuildDate><atom:link href="http://shavo007.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Alexa, ask auspost for post offices by postcode]]></title><description><![CDATA[alexa custom skill to find post offices by post code in australia]]></description><link>http://shavo007.github.io/2016/11/13/alexa-ask-auspost-for-post-offices-by-postcode/</link><guid isPermaLink="false">e163d7bb-3a3c-4779-bf02-485d209ad101</guid><category><![CDATA[alexa]]></category><category><![CDATA[serverless]]></category><category><![CDATA[lambda]]></category><category><![CDATA[node]]></category><category><![CDATA[amazon echo]]></category><category><![CDATA[amazon]]></category><category><![CDATA[dot]]></category><dc:creator><![CDATA[Shane Lee]]></dc:creator><pubDate>Sun, 13 Nov 2016 10:06:51 GMT</pubDate><content:encoded><![CDATA[<h2 id="tldr">TL;DR</h2>

<p>I will describe below my custom alexa skill.</p>

<h2 id="amazonalexa">Amazon Alexa</h2>

<p><img src="http://shavo007.github.io/content/images/2016/11/26452717290_b51f1a1f04_z.jpg" alt="alexa"></p>

<p>Recently, I have started developing alexa skills.</p>

<p>Alexa, the voice service that powers Echo, provides capabilities, or skills, that enable customers to interact with devices in a more intuitive way using voice. Examples of these skills include the ability to play music, answer general questions, set an alarm or timer and more. </p>

<p>Amazon says:  </p>

<blockquote>
  <p>Natural user interfaces, like those based on speech, represent the next major disruption in computing.</p>
</blockquote>

<p>You can now find all alexa skills on amazon.com. See the <a href="https://www.amazon.com/b?ie=UTF8&amp;node=13727921011">experience</a> </p>

<p>To see some examples of skills to use check out this <a href="http://www.wired.co.uk/article/the-best-features-of-amazon-echo">article</a></p>

<p>There is now over 3000 skills in the marketplace and growing <a href="https://techcrunch.com/2016/09/13/amazons-alexa-app-store-hits-3000-skills-up-from-1000-in-june/">fast</a></p>

<h2 id="process">Process</h2>

<p><img src="http://shavo007.github.io/content/images/2016/11/noun_666106_cc-1.png" alt=""></p>

<p>I decided to build a skill that allows consumers of an alexa enabled device to find post offices by post code in australia. </p>

<h2 id="alexaflow">Alexa flow</h2>

<p><img src="http://shavo007.github.io/content/images/2016/11/Untitled-Diagram--2-.svg" alt="Alexa flow"></p>

<h2 id="testauspostskill">Test auspost skill</h2>

<p>Now the fun part... ðŸ˜›</p>

<p>Use the service simulator to test it out <a href="https://echosim.io/">here</a> or use an amazon echo or dot.</p>

<blockquote>
  <p>"Alexa, open auspost"</p>
</blockquote>

<p>Alexa will guide you in interacting with the skill.</p>

<p>Sample utterances are:</p>

<p>Try to find post offices by post code  </p>

<blockquote>
  <p>"Alexa, ask auspost to find post offices by postcode"</p>
</blockquote>

<p>Follow the dialog flow to get post offices in your vicinity and the opening hours for today.</p>

<h4 id="disclaimer">Disclaimer</h4>

<p>This skill is not currently on the marketplace. </p>

<p><strong>TODO</strong>
Add in video showing how it plays</p>

<p>Stay tuned for more skills!!</p>]]></content:encoded></item><item><title><![CDATA[Alexa, ask home theater to put on Mr. Robot]]></title><description><![CDATA[Integrate alexa skill with plex media server using serverless technology aws lambda (FAAS)]]></description><link>http://shavo007.github.io/2016/09/06/alexa-ask-home-theater-to-put-on-mr-robot/</link><guid isPermaLink="false">49266c7f-733b-46eb-b62f-0b73847f2b46</guid><category><![CDATA[alexa]]></category><category><![CDATA[plex]]></category><category><![CDATA[lambda]]></category><category><![CDATA[aws]]></category><category><![CDATA[node]]></category><category><![CDATA[dynamodb]]></category><category><![CDATA[amazon]]></category><category><![CDATA[amazon echo]]></category><category><![CDATA[serverless]]></category><dc:creator><![CDATA[Shane Lee]]></dc:creator><pubDate>Tue, 06 Sep 2016 10:45:03 GMT</pubDate><content:encoded><![CDATA[<h1 id="plexforalexa">Plex for Alexa</h1>

<p><img src="http://shavo007.github.io/content/images/2016/09/maxresdefault.jpg" alt=""></p>

<p>Recently, I have started playing around with Alexa skill services. I currently use plex for my media content and found a project on github that has built an alexa skill already. (<strong>thanks to @overloadut</strong>)</p>

<p><a href="https://overloadut.github.io/alexa-plex/">https://overloadut.github.io/alexa-plex/</a></p>

<p>As a pet project, I decided to get this up and running.</p>

<p>Below I will go into detail on the steps involved. </p>

<h1 id="process">Process</h1>

<p><img src="http://shavo007.github.io/content/images/2016/09/PlexToAlexa.png" alt="Alexa flow"></p>

<h3 id="prerequisites">Prerequisites</h3>

<ul>
<li>Plex media server running</li>
<li>AWS account</li>
<li>Plex Home theater (PHT) client </li>
<li>Have basic knowledge of aws services, nodeJS and setting IAM roles.</li>
<li><a href="https://support.plex.tv/hc/en-us/articles/200484543-Enabling-Remote-Access-for-a-Server">Enable remote access for Plex</a></li>
</ul>

<h3 id="locally">Locally</h3>

<p>Install node, npm and git</p>

<p>Clone the github repo <a href="https://github.com/OverloadUT/alexa-plex">https://github.com/OverloadUT/alexa-plex</a></p>

<p>Run  </p>

<pre><code class="language-bash">npm install  
</code></pre>

<p>to install dependencies
Create a .env file in project root with similar properties as below:</p>

<pre><code class="language-bash">APP_PRODUCT=Alexa Plex  
APP_VERSION=2.0  
APP_DEVICE=Amazon Echo  
APP_DEVICE_NAME=Alexa  
APP_IDENTIFIER=  
ALEXA_APP_ID=  
AWS_ACCESS_KEY_ID=&lt;your own key&gt;  
AWS_SECRET_ACCESS_KEY=&lt;your own secret key&gt;  
</code></pre>

<p>There is a deploy script at the root of the project. Before you run this and update your lambda function, you need to first create it.</p>

<h3 id="awslambda">AWS Lambda</h3>

<p><img src="http://shavo007.github.io/content/images/2016/09/AWS_Simple_Icons_Compute_AWSLambda-svg--1-.png" alt=""></p>

<p>Create IAM role that has access to lambda and to dynamodb. </p>

<p>If you have aws cli setup try the sample script below. <br>
<strong><em>NB: Make sure and change the role val.</em></strong></p>

<pre><code class="language-bash">aws lambda create-function --function-name alexa-plex --region us-east-1 --runtime  nodejs4.3 --role arn:aws:iam::xxxxxx:role/lambda_basic_execution --handler  index.handler  
</code></pre>

<p>Verify you can view the lambda function in the aws console. </p>

<p>Change to trigger to be "Alexa skills kit".</p>

<h3 id="dynamodb">DynamoDB</h3>

<p><img src="http://shavo007.github.io/content/images/2016/09/AWS_Simple_Icons_Database_AmazonDynamoDB-svg.png" alt=""></p>

<p>Create a table named <em>AlexaPlexUsers</em> with a primary string key of <em>userid</em>.</p>

<h3 id="createalexaskill">Create alexa skill</h3>

<p><img src="http://shavo007.github.io/content/images/2016/09/icon_ask_120x120-_CB295607968_--1-.png" alt=""></p>

<p>Navigate to <a href="https://developer.amazon.com/">Amazon Developer Portal</a> to begin the Alexa Skill process. </p>

<p>Sign In >> Alexa >> Alexa Skills Kit >> Add new skill</p>

<h4 id="skillinformation">Skill Information</h4>

<p>Fill in the Alexa Skill store details. Define the invocation name as home theater.  </p>

<h4 id="interactionmodel">Interaction Model</h4>

<p>This will setup what commands "Plex" can process. The sample utterances enable Alexa to process a variety of phrases for the same interaction.</p>

<p>Copy in the intent schema, sample utterances and custom slot. The files are located under directory ask_configuration. </p>

<h4 id="configuration">Configuration</h4>

<p>You'll want to fill in your Lambda <strong>ARN</strong> here. <br>
Set Account Linking to No.</p>

<h4 id="test">Test</h4>

<p>Now the fun part... ðŸ˜›</p>

<p>Use the service simulator to test it out.</p>

<p>You'll need to link Alexa to your Plex account. Open your web browser to <a href="http://plex.tv/link">http://plex.tv/link</a> and ask Alexa:</p>

<blockquote>
  <p>"Alexa, tell home theater to continue setup"</p>
</blockquote>

<p>Alexa will guide you through the steps to link your account. Simply keep saying that same command and it should move to the next step.</p>

<p>Once all is good, try playing a tv show</p>

<blockquote>
  <p>"Alexa, tell home theater to play Mr. Robot"</p>
</blockquote>

<h2 id="troubleshooting">Troubleshooting</h2>

<ul>
<li><p>If you receive no response from lambda function, make sure you increase the timeout greater than ten seconds.</p></li>
<li><p>Any errors in the function, review the cloudwatch logs.</p></li>
<li><p>I had an issue where the default player was Plex Web for Chrome and not my Rasplex.
So I needed to change this entry in the dynamodb table. <br>
You will see there is a player object. You need to change the machine identifier to the client that is running plex home theater. How you find that out, is by logging into plex.tv, launching the webapp and inspecting the network requests. <br>
You can do this in Chrome by launching developer tools. You will see a XHR request similar to  <a href="https://plex.tv/devices.xml">https://plex.tv/devices.xml</a>. If you review the response you will find the client identifier value for the device you need. For me it was rasplex.</p></li>
</ul>

<h2 id="versions">Versions</h2>

<ul>
<li>PMS Version 1.0.3.2461  </li>
<li>Rasplex Version 1.6.2.123-e23a7eef</li>
</ul>

<p><strong>TODO</strong>
Add in video showing how it plays</p>]]></content:encoded></item><item><title><![CDATA[Consumer driven contract testing using PACT]]></title><description><![CDATA[pact framework to implement consumer driven contract testing against internal restful APIs]]></description><link>http://shavo007.github.io/2016/07/19/consumer-driven-contract-testing-using-pact/</link><guid isPermaLink="false">1b17dbf5-5c11-4bfd-b1b7-18199f9e7fbd</guid><category><![CDATA[docker]]></category><category><![CDATA[docker-compose]]></category><category><![CDATA[pact]]></category><category><![CDATA[contract]]></category><category><![CDATA[testing]]></category><dc:creator><![CDATA[Shane Lee]]></dc:creator><pubDate>Tue, 19 Jul 2016 11:26:24 GMT</pubDate><content:encoded><![CDATA[<h1 id="allaboutpact">All about PACT....</h1>

<p><img src="https://tech.affinitas.de/wp-content/uploads/2015/04/pact_two_parts.png" alt="The PACT Logo"></p>

<p>PACT enables consumer driven contract testing, providing a mock service and DSL for the consumer project, and interaction playback and verification for the service provider project.</p>

<p>The Pact family of testing frameworks (Pact-JVM, Pact Ruby, Pact .NET, Pact Go, Pact.js, Pact Swift etc.) provide support for Consumer Driven <br>
Contract Testing between dependent systems where the integration is based on HTTP (or message queues for some of the implementations).</p>

<p>See <a href="https://github.com/realestate-com-au/pact/wiki#implementations-in-other-languages">implementations</a></p>

<h2 id="dockerise">Dockerise...</h2>

<p><img src="https://www.docker.com/sites/default/files/docker_banner_image_12312.svg" alt="Docker"></p>

<p>To host your pacts, you need a pact broker. <br>
The Pact Broker provides a repository for consumer driven contracts created using the pact gem.</p>

<p>It:</p>

<ul>
<li>solves the problem of how to share pacts between consumer and provider projects</li>
<li>allows you to decouple your service release cycles</li>
<li>provides API documentation that is guaranteed to be up-to date</li>
<li>shows you real examples of how your services interact</li>
<li>allows you to visualise the relationships between your services </li>
</ul>

<p>There is a docker image already for pact broker, so i decided to create an image for the datastore; postgres. </p>

<p>You can find the image <a href="https://hub.docker.com/r/shanelee007/docker-pact-postgres/">here</a></p>

<p>I also defined a docker compose file to <em>orchestrate</em> starting the two containers within the same network. </p>

<p>Docker Compose is an orchestration tool that makes spinning up multi-container applications effortless.</p>

<p>See the file below:</p>

<pre><code class="language-Docker">version: '2'  
services:  
  postgres:
    image: shanelee007/docker-pact-postgres
    environment:
      -  POSTGRES_PASSWORD=ThePostgresPassword
      -  POSTGRES_USER=admin
    ports:
      - "5432:5432"
  pact:
    image: dius/pact_broker
    environment:
      -  PACT_BROKER_DATABASE_NAME=pactbroker
      -  PACT_BROKER_DATABASE_PASSWORD=TheUserPassword
      -  PACT_BROKER_DATABASE_HOST=postgres
      -  PACT_BROKER_DATABASE_USERNAME=pactbrokeruser
    ports:
      - "80:80"
    depends_on:
        - postgres
#    entrypoint: ./wait-for-it.sh postgres:5432 -- echo "postgres is up"
</code></pre>

<p>Docker command to run is  </p>

<pre><code class="language-bash">docker-compose --file docker-compose-pact.yml  up --build
</code></pre>

<p>One simple command and you have a pact broker up and running locally at <a href="http://localhost/ui/relationships">http://localhost/ui/relationships</a> ðŸ˜Ž</p>

<h2 id="acloserlookatpact">A closer look at PACT</h2>

<p>I have created a github project that demonstrates Pact end-to-end.</p>

<p>You can find the project <a href="https://github.com/shavo007/pact-demo">here</a></p>

<p>Steps are:</p>

<ul>
<li>Spin up pact broker using docker containers</li>
<li>Start the microservice</li>
<li>Run js consumer test using pact mock service and publish to pact broker</li>
<li>Run jvm consumer and publish to pact broker</li>
</ul>

<p>You should then see the contracts published at <br>
<a href="http://localhost/ui/relationships">http://localhost/ui/relationships</a></p>

<h3 id="pactbrokerrelationships">Pact broker relationships</h3>

<p><img src="http://shavo007.github.io/content/images/2016/07/Screen-Shot-2016-07-30-at-8-18-09-PM.png" alt="Pact broker"></p>

<p>You can then verify the contracts against the running microservice by running  </p>

<pre><code class="language-bash">./gradlew pactVerify
</code></pre>

<p><img src="http://shavo007.github.io/content/images/2016/07/Screen-Shot-2016-07-30-at-8-03-16-PM.png" alt="Microservice console"></p>

<h3 id="consoleverification">Console verification</h3>

<p><img src="http://shavo007.github.io/content/images/2016/07/Screen-Shot-2016-07-30-at-8-20-00-PM.png" alt=""></p>

<p>Reports are outputted in json and markdown form. Which is very useful in your CI build pipeline.  </p>

<h2 id="benefits">Benefits</h2>

<p>Pact is most valuable for designing and testing integrations where you (or your team/organisation/partner organisation) control the development of both the consumer and the provider, and the requirements of the consumer are going to be used to drive the features of the provider. It is a fantastic tool for developing and testing intra-organisation microservices.</p>

<h2 id="usefulresources">Useful resources</h2>

<ul>
<li><p><a href="http://dius.com.au/2014/05/19/simplifying-micro-service-testing-with-pacts/">http://dius.com.au/2014/05/19/simplifying-micro-service-testing-with-pacts/</a></p></li>
<li><p><a href="http://thoughtworks.github.io/pacto/patterns/cdc/">http://thoughtworks.github.io/pacto/patterns/cdc/</a></p></li>
<li><p><a href="http://docs.pact.io/">http://docs.pact.io/</a></p></li>
<li><p>Recently discussed at microservice meetup : <a href="http://www.meetup.com/Melbourne-Microservices/events/231874304/">http://www.meetup.com/Melbourne-Microservices/events/231874304/</a></p></li>
<li><p><a href="http://martinfowler.com/articles/microservice-testing/#testing-contract-introduction">http://martinfowler.com/articles/microservice-testing/#testing-contract-introduction</a></p></li>
</ul>]]></content:encoded></item><item><title><![CDATA[Elasticsearch curator 4.0 and docker]]></title><description><![CDATA[elasticsearch curator 4.0 and docker]]></description><link>http://shavo007.github.io/2016/06/30/elasticsearch-curator-4-0-and-docker-2/</link><guid isPermaLink="false">ee2b6929-ab27-4c85-91d9-17548cbe95d0</guid><category><![CDATA[docker]]></category><category><![CDATA[elasticsearch]]></category><category><![CDATA[curator]]></category><dc:creator><![CDATA[Shane Lee]]></dc:creator><pubDate>Thu, 30 Jun 2016 10:45:54 GMT</pubDate><content:encoded><![CDATA[<p><img src="http://shavo007.github.io/content/images/2016/07/icon-elasticsearch-3.svg" alt="The Elasticsearch Logo"></p>

<p>Recently, I have worked on elasticsearch. There is a very useful tool called curator. </p>

<blockquote>
  <p>Elasticsearch Curator helps you curate, or manage, your Elasticsearch indices and snapshots.</p>
</blockquote>

<p>They recently released a new version of curator. You can find the blog post <a href="https://www.elastic.co/blog/curator_v4_release">here</a></p>

<h2 id="dockerise">Dockerise...</h2>

<p><img src="https://www.docker.com/sites/default/files/Engine.png" alt="The Docker Logo"></p>

<p>Based on this post, I set myself a challenge to build my first docker image. The base of this image is apache alpine (which is very lightweight)</p>

<p>You can find it on <a href="https://hub.docker.com/r/shanelee007/docker-es-curator-cron/">dockerhub</a></p>

<h3 id="tryitout">Try it out</h3>

<pre><code class="language-bash">docker run shanelee007/docker-es-curator-cron  
</code></pre>

<p>You can mount your own configuration files if you want:  </p>

<pre><code class="language-bash"> docker run -d -v "$PWD/config":/usr/share/curator/config shanelee007/curator4
</code></pre>

<p>The dockerfile is below:</p>

<pre><code class="language-Docker">FROM alpine:latest


RUN apk --update add python py-pip &amp;&amp; \  
    pip install elasticsearch-curator &amp;&amp; \
     rm -rf /var/cache/apk/*

ADD entrypoint.sh /entrypoint.sh

WORKDIR /usr/share/curator  
COPY config ./config

RUN chmod +x /entrypoint.sh

#run every minute
ENV CRON */1  *  *  * *  
ENV ES_HOST 127.0.0.1  
ENV CONFIG_FILE /usr/share/curator/config/curator.yml  
ENV COMMAND /usr/share/curator/config/delete_log_files_curator.yml

ENTRYPOINT ["/entrypoint.sh"]
</code></pre>

<p>Try it out and any questions or feedback, please feel free to comment. </p>]]></content:encoded></item><item><title><![CDATA[ElasticSearch Part1]]></title><link>http://shavo007.github.io/2016/06/07/elasticsearch-part1/</link><guid isPermaLink="false">8b880ffb-97d6-4d39-9f7f-6984681c2afe</guid><dc:creator><![CDATA[Shane Lee]]></dc:creator><pubDate>Tue, 07 Jun 2016 12:37:03 GMT</pubDate><content:encoded/></item><item><title><![CDATA[Playing around with Docker for Mac Beta]]></title><link>http://shavo007.github.io/2016/06/07/playing-around-with-docker-for-mac-beta/</link><guid isPermaLink="false">b1525dc3-280b-4d6d-a109-76f78244c295</guid><category><![CDATA[docker]]></category><category><![CDATA[mac]]></category><category><![CDATA[beta]]></category><dc:creator><![CDATA[Shane Lee]]></dc:creator><pubDate>Tue, 07 Jun 2016 12:33:12 GMT</pubDate><content:encoded/></item><item><title><![CDATA[Building a microservice using docker]]></title><description><![CDATA[tutorial on building a spring boot app using docker]]></description><link>http://shavo007.github.io/2016/06/05/building-a-microservice-using-docker/</link><guid isPermaLink="false">efc343c5-2778-4902-bbea-d336184f2d14</guid><category><![CDATA[docker]]></category><category><![CDATA[spring]]></category><category><![CDATA[spring-boot]]></category><category><![CDATA[docker-compose]]></category><category><![CDATA[elasticsearch]]></category><category><![CDATA[kibana]]></category><dc:creator><![CDATA[Shane Lee]]></dc:creator><pubDate>Sun, 05 Jun 2016 11:14:28 GMT</pubDate><content:encoded/></item><item><title><![CDATA[Welcome to Ghost]]></title><description><![CDATA[<p>You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at <code>&lt;your blog URL&gt;/ghost/</code>. When you arrive, you can select this post from a list</p>]]></description><link>http://shavo007.github.io/2016/06/04/welcome-to-ghost/</link><guid isPermaLink="false">bd6cd519-fce9-4139-b2bb-bd1bd346c59a</guid><category><![CDATA[Getting Started]]></category><dc:creator><![CDATA[Shane Lee]]></dc:creator><pubDate>Sat, 04 Jun 2016 06:24:13 GMT</pubDate><content:encoded><![CDATA[<p>You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at <code>&lt;your blog URL&gt;/ghost/</code>. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!</p>

<h2 id="gettingstarted">Getting Started</h2>

<p>Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!</p>

<p>Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use <em>shortcuts</em> to <strong>style</strong> your content. For example, a list:</p>

<ul>
<li>Item number one</li>
<li>Item number two
<ul><li>A nested item</li></ul></li>
<li>A final item</li>
</ul>

<p>or with numbers!</p>

<ol>
<li>Remember to buy some milk  </li>
<li>Drink the milk  </li>
<li>Tweet that I remembered to buy the milk, and drank it</li>
</ol>

<h3 id="links">Links</h3>

<p>Want to link to a source? No problem. If you paste in a URL, like <a href="http://ghost.org">http://ghost.org</a> - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to <a href="http://ghost.org">the Ghost website</a>. Neat.</p>

<h3 id="whataboutimages">What about Images?</h3>

<p>Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:</p>

<p><img src="https://ghost.org/images/ghost.png" alt="The Ghost Logo"></p>

<p>Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:</p>

<h3 id="quoting">Quoting</h3>

<p>Sometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!</p>

<blockquote>
  <p>Ghost - Just a blogging platform</p>
</blockquote>

<h3 id="workingwithcode">Working with Code</h3>

<p>Got a streak of geek? We've got you covered there, too. You can write inline <code>&lt;code&gt;</code> blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.</p>

<pre><code>.awesome-thing {
    display: block;
    width: 100%;
}
</code></pre>

<h3 id="readyforabreak">Ready for a Break?</h3>

<p>Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.</p>

<hr>

<h3 id="advancedusage">Advanced Usage</h3>

<p>There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.</p>

<p><input type="text" placeholder="I'm an input field!"></p>

<p>That should be enough to get you started. Have fun - and let us know what you think :)</p>]]></content:encoded></item></channel></rss>
